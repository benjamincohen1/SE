/**
    @author Jack Lawrence
*/
import java.io.*;
import java.util.*;
import javax.xml.*;
import org.w3c.dom.*;
/** The customer command line interface. */
@Deprecated
public class CustomerCLI extends CommandLineInterface {

    /** @name Instance Variables */
    
    private static CustomerActionBridge _actionBridge;
    
    private static CustomerActionBridge actionBridge() {
        return _actionBridge;
    }
    
    /**
        Print a formatted grid of the items in the vending machine.
    */
    private static void display() {
        if (_currTransaction == null) {
            beginTransaction();
        }
        for (int row = 0; row < vendingMachine().height(); row++) {
            for (int column = 0; column < vendingMachine().width(); column++) {   	
                Slot currSlot = vendingMachine().slotAtCoordinates(row, column);
                if (currSlot == null) //check to see if this slot is null (meaning no slot object has been initialized)
                	System.out.print(String.format("[%s: %.2f (%d)]\t", "Empty", 0.00, 0));
                else
                	System.out.print(String.format("[%s: %.2f (%d)]\t", currSlot.metadata().name(), currSlot.metadata().price()/100.0, currSlot.quantity()));
            }
            System.out.println();
            for (int column = 0; column < _vendingMachine.width(); column++){   //display item number
            	System.out.print("\t"+(row+1)+""+(column+1) + "\t\t");
            }
            System.out.println();
        }
    }
    
    
    /**
        List all of the items currently in the user's cart (the current transaction).
    */
    private static void listItemsInCart() {
        if (_currTransaction != null && _currTransaction.size() != 0) {
            double total = 0.0;
            int index = 0;
            for (Map.Entry<CoordinatePair, Integer> entry : _currTransaction.entrySet()) {
                CoordinatePair pair = entry.getKey();
                Integer quantity = entry.getValue();
                if (quantity > 0) {
                    index++;
                    Slot slot = vendingMachine().slotAtCoordinates(pair.row, pair.column);
                    total += (slot.metadata().price()*quantity)/100.0;
                    System.out.println(String.format("%d. %s %.2f (%d): %.2f", index, slot.metadata().name(), slot.metadata().price()/100.0, quantity, (slot.metadata().price()*quantity)/100.0));
                }
            }
            System.out.println("-------------------------------------------------------------------");
            System.out.println(String.format("Total: %.2f", total));
        }
        else {
            System.out.println("Cart is empty.");
        }
    }
    
        
    
    
    private static void quit() throws IOException{
        try{
            cancelTransaction();
        }
        catch(IOException ex){
            throw new IOException("Not sure why I have to do this");
        }
    }
    
    private static String menuDescription() {
        return "-------------------------------------------------------------------\n" + 
               "Customer Vending Machine CLI\n\n" + 
               "Type help at any time to print the following menu options:\n" + 
               "display                   display the items in the vending machine\n" +  
               "cancel                    cancel a transaction\n" + 
               "pay                       purchase the items in your cart\n" + 
               "cart                      list the items in your cart\n" + 
               "add [number] [quantity]   add a quantity of an item in a slot to your cart (Number should be [rowcol] format)\n" + 
               "remove [number]           remove the numbered line item from your cart\n" + 
               "help                      print this menu again\n" + 
               "quit                      close the application\n" + 
               "-------------------------------------------------------------------";
    }
    
    public static void main(String args[]) throws IOException, FileNotFoundException{
        _actionBridge = new CustomerActionBridge(args[0]);
        
        String userCommand = "";
        while (!userCommand.equals("quit")) {
            System.out.println(menuDescription());
            System.out.print("CustomerCLI> ");
            userCommand = inputScanner().nextLine().toLowerCase(); // Lowercase to normalize input.
        
            if (userCommand.equals("display")) {
                display();
            }
            else if (userCommand.equals("begin")) {
                actionBridge().beginTransaction();
            }
            else if (userCommand.equals("cancel")) {
                actionBridge().cancelTransaction();
            }
            else if (userCommand.equals("pay")) {
                try{
                    actionBridge().finishPayment(vendingMachine.name(),vendingMachine);
                }
                catch(IOException ex){
                    throw new IOException("You dun messed up");
                }
            }
            else if (userCommand.equals("cart")) {
                listItemsInCart();
            }
            else if (userCommand.startsWith("add")) {
                try {
                    ArrayList<Integer> parsedArgs = positiveIntegerArgumentsOnCommand(userCommand, 2);
                    if (parsedArgs != null) {
                        actionBridge().addItemToCart(parsedArgs.get(0), parsedArgs.get(1));
                        listItemsInCart();
                    }
                }
                catch (IllegalArgumentException argumentException) {
                    System.err.println(argumentException.getMessage());
                }
            }
            else if (userCommand.startsWith("remove")) {
                ArrayList<Integer> parsedArgs = positiveIntegerArgumentsOnCommand(userCommand, 1);
                if (parsedArgs != null) {
                    if (_currTransaction == null) {
                        actionBridge().beginTransaction();
                    }
                    int zeroBasedIndex = parsedArgs.get(0)-1; // FIXME probably should move index shift to removeItemFromCartWithCoordinates().
                    if ((zeroBasedIndex+1) > _currTransaction.size()) {
                        System.err.println("Error: index out of bounds.");
                    }
                    else {
                        CoordinatePair chosenCoordinatePair = (CoordinatePair)_currTransaction.keySet().toArray()[zeroBasedIndex];
                        actionBridge().removeItemFromCartWithCoordinates(chosenCoordinatePair);
                    }
                }
            }
            else if (!userCommand.equalsIgnoreCase("help") && !userCommand.equalsIgnoreCase("quit")) {
                // If the command isn't any of the ones in the menu, print an error and continue.
                // We don't need to specifically handle help and quit since help gets printed every
                // time through the loop and quit is handled in the while statement.
                System.err.println("Command not recognized.");
            }
        }  
        quit();
    }
}
